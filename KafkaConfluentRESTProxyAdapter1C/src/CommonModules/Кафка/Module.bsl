	  
// Как я думаю что будет использоваться модуль:
// 
//  СоединениеКафка = НовоеОписаниеСоединения("http:\\localhost:");
//  Подписчик = НовыйПодписчик(СоединениеКафка);
//  Подписаться(Подписчик, "1c.topic");
//  Сообщения = ПолучитьСообщения(Подписчик);
//  
//  СообщенияУспешноОбработанных = Новый Массив;
//  СообщенияОбработанныхСОшибкой = Новый Массив;
//  
//  Для каждого Собщение из Сообщения Цикл
//    РезультатОбработки = ВыполнитьОбработкуСообщения(Сообщение);
//    ЗафиксироватьРезультат(РезультатОбработки, СообщенияУспешноОбработанных, СообщенияОбработанныхСОшибкой);
//  КонецЦикла
//  
//  ЛогикаПодтверждения = ПодтверждатьСообщенияДоПоявленияОшибки или ПодтверждатьВсеПолученные;
//  
//  ПодтвердитьПолучение(Подписчик);
//  УдалитьПодисчика(Подписчик);
//  
//  Перед подтверждением может выполняться попытка обработки сообщений и тогда результат обработки может влиять на подтверждение.
//  
//  СоединениеКафка = НовоеОписаниеСоединения("http:\\localhost:");
//  Отправитель = НовыйОтправитель(СоединениеКафка);
//  СоздатьТопик(Отправитель, "1c.topic", КоличествоРазделов = 1);
//  ОтправитьСообщения(Отправитель, МассивСообщений, Топик):
//  
//  
//   
//Необходимые объекты:
//Подписчик 
// - БазовыйАдрес
// - ИмяГруппыПодписчиков
// - ИмяЭкземпляраПодписчика
// - ИспользоватьАвтоподтверждение
// - Топики 
// - Соединение
//
//Данные из топиков
// - 
//
//
//
//
//СдвигиТопиков
//
//

#Область ПрограммныйИнтерфейс

Функция НовоеОписаниеСоединения(БазовыйАдрес, ФорматОбмена = "json") Экспорт 
	
	ВозможныеФорматы = Новый Массив;
	ВозможныеФорматы.Добавить("json");
	ВозможныеФорматы.Добавить("binary");
	
	МассивОпераций = Новый Массив();
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ИсторияОпераций", МассивОпераций);
	РезультатВыполнения.Вставить("ИнформацияОбОперации", Неопределено);
	РезультатВыполнения.Вставить("ОшибкаВыполнения", Ложь);

	СвойстваСоединения = Новый Структура;
	СвойстваСоединения.Вставить("Адрес", БазовыйАдрес);
	СвойстваСоединения.Вставить("Формат", ФорматОбмена);
	СвойстваСоединения.Вставить("Заголовки", Неопределено);
	СвойстваСоединения.Вставить("КешСоединения", Неопределено);
	СвойстваСоединения.Вставить("РезультатСоединения", РезультатВыполнения);
	
	ВыполнитьКонтрольДопустимыхФорматов(СвойстваСоединения, ВозможныеФорматы);
	
	ЗаполнитьЗаголовки(СвойстваСоединения, ФорматОбмена);
	
	Возврат СвойстваСоединения; 
	
КонецФункции


Функция НовыйОтправитель(ОписаниеСоединения) Экспорт
	
	ОписаниеОтправителя = СвойстваОтправителя();
	ОписаниеОтправителя.ОписаниеСоединения = ОписаниеСоединения;
	Возврат ОписаниеОтправителя;
	
КонецФункции

Процедура ОтправитьСообщения(Отправитель) Экспорт

	ОписаниеСоединения = Отправитель.ОписаниеСоединения;
	
	МассивАдреса = Новый Массив;
	МассивАдреса.Добавить(ОписаниеСоединения.Адрес);
	МассивАдреса.Добавить("topics");
	Адрес = СтрСоединить(МассивАдреса, "/");
	
	СообщенияПоТопикам = Отправитель.СообщенияПоТопикам;	
	Для Каждого ТопикСообщения Из СообщенияПоТопикам Цикл
		Топик = ТопикСообщения.Ключ;
		Сообщения = ТопикСообщения.Значение;
		АдресТопика = Адрес + "/" + Топик;
		
		СоответствиеСообщений = Новый Структура("records", Сообщения);
		СообщенияПодготовленные = КоннекторHTTP.ОбъектВJson(СоответствиеСообщений);
		
		СтруктураЗаголовки = Новый Структура;
		СтруктураЗаголовки.Вставить("Заголовки", ОписаниеСоединения.Заголовки);
		
		    Заголовки = Новый Соответствие;                                                                   
    Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
    Заголовки = Новый Структура("Заголовки", Заголовки);


		РезультатОтправкиСообщения = КоннекторHTTP.Post(АдресТопика, СообщенияПодготовленные, Заголовки);    

		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ДобавитьСообщение(Отправитель, Сообщение, Топик, Ключ = Неопределено, Раздел = Неопределено) Экспорт
		
	НовоеСообщение = "";	
	Если Отправитель.ОписаниеСоединения.Формат = "json" Тогда 
		ПараметрыСообщения = Новый Структура;                        
		ПараметрыСообщения.Вставить("key", Ключ);
		ПараметрыСообщения.Вставить("partition", Раздел);               
		ПараметрыСообщения.Вставить("value", Сообщение); 	
		НовоеСообщение = КоннекторHTTP.ОбъектВJson(ПараметрыСообщения);	
	КонецЕсли;
	
	СообщенияПоТопикам = Отправитель.СообщенияПоТопикам;	
	МассивСообщенийТопика = СообщенияПоТопикам.Получить(Топик);
	Если МассивСообщенийТопика <> Неопределено Тогда 
		МассивСообщенийТопика.Добавить(НовоеСообщение);
	Иначе
		МассивСообщенийТопика = Новый Массив;
		МассивСообщенийТопика.Добавить(НовоеСообщение);
	КонецЕсли;
	
	СообщенияПоТопикам.Вставить(Топик, МассивСообщенийТопика); 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти


Процедура ВыполнитьКонтрольДопустимыхФорматов(СвойстваСоединения, ВозможныеФорматы)
	
	Формат = СвойстваСоединения.Формат;
	Если ВозможныеФорматы.Найти(Формат) = Неопределено Тогда 
		ЭтоОшибка = Истина;
		ШаблонСообщения = НСтр("ru = 'Формат обмена: %1 не поддерживается данным модулем! '");
		Сообщение = СтрШаблон(ШаблонСообщения, Формат);	
	Иначе
		ЭтоОшибка = Ложь;		
		ШаблонСообщения = НСтр("ru = 'Проверка выполнена успешно. Формат обмена: %1 поддерживается данным модулем. '");
		Сообщение = СтрШаблон(ШаблонСообщения, Формат);
	КонецЕсли;
		
	ДополнитьПротоколСоединения(СвойстваСоединения, Сообщение, ЭтоОшибка)
			
КонецПроцедуры

Процедура ДополнитьПротоколСоединения(СвойстваСоединения, Сообщение, ЭтоОшибка)
	
	РезультатСоединения = СвойстваСоединения.РезультатСоединения;
	РезультатСоединения.ИсторияОпераций.Добавить(Сообщение);
	РезультатСоединения.ИнформацияОбОперации = Сообщение;
	РезультатСоединения.ОшибкаВыполнения = ЭтоОшибка;

КонецПроцедуры

Функция НовыйПодписчик( ОписаниеСоединения, 
						ИмяГруппыПодписчиков = Неопределено, 
						ИмяЭкземпляраПодписчика = Неопределено, 
						ИспользоватьАвтоподтверждение = Ложь)
	
	СгенерироватьИмяПустомуЗначению(ИмяГруппыПодписчиков);
	СгенерироватьИмяПустомуЗначению(ИмяЭкземпляраПодписчика);
		
	ОписаниеПодписчика = СвойстваПодписчика();
	ОписаниеПодписчика.ОписаниеСоединения = ОписаниеСоединения;
	ОписаниеПодписчика.ИмяГруппыПодписчиков = ИмяГруппыПодписчиков;
	ОписаниеПодписчика.ИмяЭкземпляраПодписчика = ИмяЭкземпляраПодписчика;
	ОписаниеПодписчика.ИспользоватьАвтоподтверждение = ИспользоватьАвтоподтверждение;
	
	
КонецФункции

Функция СвойстваПодписчика()
	
	СтруктураПодписчика = Новый Структура;
	СтруктураПодписчика.Вставить("ОписаниеСоединения");
	СтруктураПодписчика.Вставить("ИмяГруппыПодписчиков");
	СтруктураПодписчика.Вставить("ИмяЭкземпляраПодписчика");
	СтруктураПодписчика.Вставить("ИспользоватьАвтоподтверждение");
	СтруктураПодписчика.Вставить("Топики");
	СтруктураПодписчика.Вставить("СдвигТекущий");
	СтруктураПодписчика.Вставить("СдвигПолученныхСообщений");

	Возврат СтруктураПодписчика;
	
КонецФункции

Функция СвойстваОтправителя()
	
	СообщенияПоТопикам = Новый Соответствие;
	СтруктураОтправитея = Новый Структура;
	СтруктураОтправитея.Вставить("ОписаниеСоединения");
	СтруктураОтправитея.Вставить("Топик");
	СтруктураОтправитея.Вставить("Ключ");
	СтруктураОтправитея.Вставить("Раздел");
	СтруктураОтправитея.Вставить("СообщенияПоТопикам", СообщенияПоТопикам);

	Возврат СтруктураОтправитея;
	
КонецФункции

Процедура ЗаполнитьЗаголовки(Знач СвойстваСоединения, Знач ФорматОбмена)
	
	Перем Заголовки;
	
	Если ФорматОбмена = "json" Тогда
		Заголовки = Новый Соответствие;                                                                   
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		СвойстваСоединения.Вставить("Заголовки", Заголовки);
	КонецЕсли;

КонецПроцедуры


Процедура СгенерироватьИмяПустомуЗначению(Имя)
	Если Имя = Неопределено Тогда
		Имя = СокрЛП(Новый УникальныйИдентификатор());
	КонецЕсли;
КонецПроцедуры

//
	  
// Необходимые методы:
//СоздатьПодписчикаЭкземпляр(ИмяГруппыПодписчиков, ИмяЭкземпляраПодписчика, ИспользоватьАвтоподтверждение  
//CreateConsumerInstance(ConsumerGroupName, ConsumerInstanceName,  AutoCommitEnable 
//Подписаться(ИмяГруппыПодписчиков, ИмяЭкземпляраПодписчика, Топики, 
//Subscribe(ConsumerGroupName, ConsumerInstanceName, Topics, 
//ДанныеИзТопиковПодписчика(ИмяЭкземпляраПодписчика
//ConsumerTopicData(ConsumerInstanceName
//ПодтвердитьПодписчикаСдвиг(ИмяЭкземпляраПодписчика, СдвигиТопиков
//CommitConsumersOffset(ConsumerInstanceName, TopicsOffsets
//УдалитьПодписчика(
//DeleteSubscriber( 
//
//
//
//
//
